* Spring 2020 - Lab 07

* Last name:

* First name:

* GitHub username:

* Notes:
Code review
PRO
1. Had very simple easy to understand variable names.
2. Pretty organized code.
CON
1. Hard to understand what happens where.
2. comments can be very useful here.

* File structure:

* General instructions:
- Fill in your name and GitHub username on top.
- Use the Notes section to add any notes to the instructor.

- The main lab description can be found here:
  https://maryash.github.io/135/labs/lab_07.html please note the
  changes in order to complete the lab.

- Do Not add object files (anything with .o), executables, (a.out etc.) or any  files other than the .cpp files specified for the tasks to the repo.

* Daedalus specific instructions:

For this and future labs you will have:
1. A Makefile with at least three targets:
   - *main* which will build the executable *main*.
   - *tests* which will build the executable *tests*.
     The executable *tests* will perform all the doctest tests.
   - *clean* which will remove all the .o files.
2. At least one additional set of cpp/h files for your functions.
3. Remember that you will only have one program with multiple files /
   functions in spite of what the main lab page says.
** Makefile modifications

The provided Makefile is *incomplete*. It only contains references to
*main* and *tests*. You must add references to all other necessary
files (.cpp and .h). Remember you are required to put your actual
functionality into files other than main.cpp.

** Important notes on other provided files
*** tests.cpp

tests.cpp is provided but doesn't include any tests or the includes
you will need. For this lab, it is up to you to decide on what tests
are appropriate.

* Lab Notes

For this lab, you will have to decide on a single function as an entry
point and it should return a string representing the correctly
formatted program. You will also have to decide what that function
takes as a parameter or parameters (for example, a filename or a
string representing the unformatted program) but remember that when
the tests are run, there should be no user input - everything should
be automated (you can require user input when the *main* target is run.

Also remember you can embed "\n" in a string for a newline and "\t" for a
tab and that you can compare strings to see if they are the same.



